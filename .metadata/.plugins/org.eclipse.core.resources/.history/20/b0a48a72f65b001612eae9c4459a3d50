package du.iit.dhaka;

import java.awt.List;
import java.util.ArrayList;

public class RecartionDFS {
	public static int N;
	 static int[][]  adjMatrix=new int[N][N];
	 static boolean[] visited=new boolean[N];
	static ArrayList<Integer> path=new ArrayList<Integer>();
	
	 public static void dfs(int i){
		 visited[i]=true;
		 int j;
		 path.add(i);
		 for(j=0;j<adjMatrix.length;j++){
			 if(adjMatrix[i][j]> 0 && visited[j] ){
				 dfs(j);
			 }
		 }
		 
	 }
	public static void main(String[] args) {
		int[][] Graph = {  { 0, 1, 0, 1, 0, 0, 0, 0, 1 },  // 0
				{ 1, 0, 0, 0, 0, 0, 0, 1, 0 },  // 1
				{ 0, 0, 0, 1, 0, 1, 0, 1, 0 },  // 2
				{ 1, 0, 1, 0, 1, 0, 0, 0, 0 },  // 3
				{ 0, 0, 0, 1, 0, 0, 0, 0, 1 },  // 4
				{ 0, 0, 1, 0, 0, 0, 1, 0, 0 },  // 5
				{ 0, 0, 0, 0, 0, 1, 0, 0, 0 },  // 6
				{ 0, 1, 1, 0, 0, 0, 0, 0, 0 },  // 7
				{ 1, 0, 0, 0, 1, 0, 0, 0, 0 } };// 8
		
			N=Graph.length;
		 for (int i = 0; i < Graph.length; i++) {
			for (int j = 0; j < Graph.length; j++) {
				
				adjMatrix[i][j]=Graph[i][j];
			}
		}
		 
		 dfs(0);
		 
		 for (int i = 0; i < Graph.length; i++) {
			System.out.println(path.get(i));
		}
		 

	}

}
