package du.iit.dhaka;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ShobelDemo {

	
	public static void main(String[] args) throws IOException {
		//ArrayList<Integer> imgArray = new ArrayList<Integer>();
		 double  Gx[][], Gy[][], G[][]; 
		 
		BufferedImage image;
		   int width;
		   int height;
		   
		   File file=new File("shobel.png");
		   image = ImageIO.read(file);
		   width = image.getWidth();
	       height = image.getHeight();
	       int[][] imgArray=new int[height][width];
	       Gx = new double[height][width];   
	       Gy = new double[height][width];   
	       G  = new double[height][width];
	       int[] pixels = new int[width * height]; 
	       
	       for(int i=0; i<height; i++){
	             
	             for(int j=0; j<width; j++){
	            	 
	            	 Color c = new Color(image.getRGB(j, i));
	            	 int red = (int)(c.getRed() * 0.299);
	                 int green = (int)(c.getGreen() * 0.587);
	                 int blue = (int)(c.getBlue() *0.114);
	                 Color newColor = new Color(red+green+blue,
	                         
	                         red+green+blue,red+green+blue);
	                 int grayvalue=newColor.getRGB();
	            	 imgArray[i][j]=grayvalue;
	             }
	             
	       }
		   
	       for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				if (i==0 || i==height-1 || j==0 || j==width-1) {Gx[i][j] = Gy[i][j] = G[i][j] = 0;} // Image boundary cleared   
		        else{   
		            Gx[i][j] = imgArray[i+1][j-1] + 2*imgArray[i+1][j] + imgArray[i+1][j+1] -   
		            		imgArray[i-1][j-1] - 2*imgArray[i-1][j] - imgArray[i-1][j+1];   
		            Gy[i][j] = imgArray[i-1][j+1] + 2*imgArray[i][j+1] + imgArray[i+1][j+1] -   
		            		imgArray[i-1][j-1] - 2*imgArray[i][j-1] - imgArray[i+1][j-1];   
		            G[i][j]  = Math.abs(Gx[i][j]) + Math.abs(Gy[i][j]);   
		          }     
				
				
			}
			}
	       	int count=0;
	       for (int i = 0; i <height; i++) {
			for (int j = 0; j < width; j++) {
				pixels[count]=(int) G[i][j];
				count=count+1;
			}
		}
	       
	       
	       
	       
	       
	       BufferedImage outImg = new BufferedImage(height,width,BufferedImage.TYPE_BYTE_GRAY);   
	       outImg.getRaster().setPixels(0,0,height,width,pixels);   
	       FileOutputStream outFile = new FileOutputStream("copyTop.bmp");   
	       ImageIO.write(outImg,"BMP",outFile);
	       
	       
//	       
//	       BufferedImage bufferImage2=new BufferedImage(height, width,BufferedImage.TYPE_INT_RGB);
//	       
//	       bufferImage2.getRaster().setPixels(0, 0, height, width, pixels);
	       
//	       for (int i = 0; i < height; i++) {
//			for (int j = 0; j < width; j++) {
//				int Pixel=imgArray[i][j];
//				bufferImage2.setRGB(j, i,Pixel);
//				
//			}
//		}
	       File outputfile = new File("D:/number/saved.jpg");
	         ImageIO.write(bufferImage2, "jpg", outputfile);
		   
		   
	}

}
